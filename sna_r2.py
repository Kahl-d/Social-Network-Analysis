# -*- coding: utf-8 -*-
"""Sna_R2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15bAwZ7PhMqmtszrg12r1uLK_M87xPKKd
"""

from google.colab import drive
drive.mount('/content/drive')

cd '/content/drive/My Drive/'

import matplotlib.pyplot as plt
from networkx.algorithms import community
from networkx import edge_betweenness_centrality as betweenness
import pandas as pd
import networkx as nx
import numpy as np

x = [4,2,3,2,3]
y = [6,4,7,4,4]
plt.scatter(x,y)
plt.xlabel('Number of Step for max nodes')
plt.ylabel('Number of max nodes')
plt.title('Plot')
plt.figure(figsize=(20,20))
plt.show()

df = pd.read_csv("PatientInfo.csv")
df['infected_by'].replace(np.nan, 'x', inplace=True)
df = df[df.infected_by != 'x']
df.head()

plt.figure(figsize=(20,20))

g = nx.from_pandas_edgelist(df, source='infected_by', target='patient_id' , edge_attr=True)
graph_pos = nx.spring_layout(g)
nx.draw_networkx_nodes(g, graph_pos, node_size=20, node_color='blue', alpha=0.3)
nx.draw_networkx_edges(g, graph_pos,arrows = True)
plt.show()

df1 = pd.read_csv("Cit-HepPh.csv")
df2 = df1.sample(1000)
df2.head()

plt.figure(figsize=(25,25))

G = nx.from_pandas_edgelist(df2, source='from_node', target='to_node' , edge_attr=True,create_using=nx.Graph)
graph_pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, graph_pos, node_size=20, node_color='blue', alpha=0.3)
nx.draw_networkx_edges(G, graph_pos,arrows = False)

len(G)

g1 = max(nx.connected_components(G), key=len)
g2 = G.subgraph(g1)

plt.figure(figsize=(25,25))
nx.draw_networkx_nodes(g2, graph_pos, node_size=20, node_color='blue', alpha=0.3)
nx.draw_networkx_edges(g2, graph_pos,arrows = False)

len(g2)

def most_central_edge(G):
    centrality = betweenness(G)
    return max(centrality, key=centrality.get)
    a = most_central_edge(G)


print(a)

from networkx.algorithms import community
comp = community.girvan_newman(G,most_valuable_edge=most_central_edge)

mapper = {}
cnt = 0

for c in next(comp) :
  cnt = cnt+ 1
  for i in c :
    mapper[i]=cnt

print(len(mapper))
for i in sorted (mapper.keys()):
  print(i, mapper[i])

color_map = []

for node in G.nodes:
  if node in mapper:
    color_map.append(mapper[node])
  else :
    color_map.append( 'black' )

pos = nx.spring_layout(G)
plt.figure(figsize=( 25,25 ))
plt.axis( 'ON' )
nx.draw_networkx_nodes(G, graph_pos, node_color = color_map, with_labels =False ,node_size = 20 )
plt.show()

def most_central_edge(G):
    centrality = betweenness(G)
    return max(centrality, key=centrality.get)
    a = most_central_edge(G)


print(a)

for i in range(50):
  a = most_central_edge(G)
  G.remove_edge(a[0],a[1])

plt.figure(figsize=(25,25))
nx.draw_networkx_nodes(G, graph_pos, node_size=20, node_color='blue', alpha=0.3)
nx.draw_networkx_edges(G, graph_pos,arrows = False)